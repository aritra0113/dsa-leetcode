//Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

//A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted 
without changing the relative order of the remaining characters.

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {

        int ind1=text1.length();
        int ind2=text2.length();

        int dp[][]=new int[ind1+1][ind2+1];
        

        return f(text1,text2,ind1,ind2,dp);
        
    }
   /* public int f(String text1, String text2,int ind1,int ind2,int [][]dp)
    {
            if(ind1<0||ind2<0)return 0;

        if(dp[ind1][ind2]!=-1 )return dp[ind1][ind2];
        if(text1.charAt(ind1)==(text2.charAt(ind2)))
      return dp[ind1][ind2]=  1+f(text1,text2,ind1-1,ind2-1,dp);

        return dp[ind1][ind2]=  0+Math.max(f(text1,text2,ind1-1,ind2,dp),f(text1,text2,ind1,ind2-1,dp));
    }*/

//in array we cannot get the index -1 so we just did right shifting of the indexes
    public int f(String text1, String text2,int ind1,int ind2,int [][]dp)
    {


        for(int i=0;i<=ind1;i++)dp[i][0]=0;
         for(int i=0;i<=ind2;i++)dp[0][i]=0;

         //invert the recurrance

         for(int i=1;i<=ind1;i++)
         {
            for(int j=1;j<=ind2;j++)
            {
                if(text1.charAt(i-1)==(text2.charAt(j-1)))
                dp[i][j]=  1+dp[i-1][j-1];
                else
        dp[i][j]=  0+Math.max(dp[i-1][j],dp[i][j-1]);

            }
         }
         return dp[ind1][ind2];
    }
}
