class Solution {
    //int minsum=Integer.MAX_VALUE;
    public int minPathSum(int[][] grid) {

        int dp[][]=new int[grid.length][grid[0].length];

        for(int i=0;i<dp.length;i++)
        {
            Arrays.fill(dp[i],Integer.MAX_VALUE);
        }

        return(count(grid,dp,0,0));
        
    }
    public int count(int[][] grid,int[][] dp,int r,int c)
    {

        if(r==grid.length-1 && c==grid[0].length-1)
        {dp[r][c]=grid[r][c];
        return dp[r][c];}

     

      

 if(r>=grid.length||c>=grid[0].length||r<0||c<0) return Integer.MAX_VALUE;
 if(dp[r][c]!=Integer.MAX_VALUE) return dp[r][c];
// System.out.println(sum);
        
      int down=   count(grid,dp,r+1,c);
        int right= count(grid,dp,r,c+1);
        dp[r][c]=grid[r][c]+Math.min(down,right);
        return dp[r][c];

    }
}
