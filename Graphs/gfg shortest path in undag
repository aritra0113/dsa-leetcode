//You are given an adjacency list, adj of Undirected Graph having unit weight of the edges, find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.


class Solution {
    public int[] shortestPath(ArrayList<ArrayList<Integer>> adj, int src) {
        // code here
        
        int v=adj.size();//to get the number of the vertex
        
        ArrayList<Integer> graph[]=new ArrayList[v];
        //System.out.println("here");
       for(int i=0;i<v;i++)
       {
           graph[i]=new ArrayList<Integer>();
           List a=adj.get(i);
           if(a.size()>0)
        {
            for(int  j:adj.get(i))
            {
           graph[i].add(j);
            }
           }
       }
       
       Queue<Integer> q=new LinkedList<>();
       int dis[]=new int[v];
      for(int i=0;i<v;i++)
       {
           if(i!=src)
          dis[i]=Integer.MAX_VALUE;
           
           else
          { dis[i]=0;
           q.add(i);}
       }
       while(!q.isEmpty())
       {
           int x=q.poll();
           int wt=dis[x];
           
           for(int j:graph[x])
           {
               int dist=dis[j];
               
               if(wt+1<dist)
               {q.add(j);
               dis[j]=wt+1;}
               
               
           }
       }
       
       for(int i=0;i<v;i++)
       {
           if(dis[i]==Integer.MAX_VALUE)
           dis[i]=-1;
       }
       
       return dis;
       
       
       
       
       
       
    }
    
    
    
}
