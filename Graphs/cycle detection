import java.util.*;

public class cycles {

    public static void main(String[] args) {
        int vertex=3;
       ArrayList<Edge> graph[]=new ArrayList[vertex]; //taking the array of the arraylist
       creategraph(graph);
        boolean vis[]=new boolean[vertex]; 
        boolean rec[]=new boolean[vertex]; 
        boolean g=false;

         for(int i=0;i<vertex;i++)
            {
                if(!vis[i])
                g=dircycle(graph, vis, i, rec);
            }  
           //boolean g=undcycle(graph,vis,0,-1);

           System.out.println(g);
           System.err.println("rec is "+Arrays.toString(rec));
    }


public static void creategraph(ArrayList<Edge> graph[])
    {
        for(int i=0;i<graph.length;i++ ){
            graph[i]=new ArrayList<Edge>();//previously it has null values in the array but now we assigning empty arrray list to each 
            //index of the array
           

        }
/* graph[0].add(new Edge(0, 1));
graph[0].add(new Edge(0, 4));

graph[1].add(new Edge(1, 0));
graph[1].add(new Edge(1, 2));
graph[1].add(new Edge(1, 4));

graph[2].add(new Edge(2, 1));
graph[2].add(new Edge(2, 3));

graph[3].add(new Edge(3, 2));

graph[4].add(new Edge(4, 0));
graph[4].add(new Edge(4, 1));
graph[4].add(new Edge(4, 5));

graph[5].add(new Edge(5, 4));  */

/* graph[0].add(new Edge(0, 1));


graph[1].add(new Edge(1, 0));
graph[1].add(new Edge(1, 2));

graph[2].add(new Edge(2, 1)); */

graph[0].add(new Edge(0,1));

graph[0].add(new Edge(0,2));

graph[2].add(new Edge(2,1));

/* graph[3].add(new Edge(3,4));

graph[4].add(new Edge(4,2)); */





            
    }

    public static boolean undcycle(ArrayList<Edge> graph[],boolean vis [],int curr, int par)
    {
       //System.out.println(curr);
        vis[curr]=true;
        for(int i=0;i<graph[curr].size();i++)     
        {
            Edge e=graph[curr].get(i);
            if(vis[e.dest] && e.dest!=par)
                return true;
            else if(!vis[e.dest])
                {if(undcycle(graph,vis,e.dest,curr))
                return true;}
        }
        return false;
    }

    public static boolean dircycle(ArrayList<Edge> graph[],boolean vis [],int curr, boolean rec[])
    {
        vis[curr]=true;
        rec[curr]=true;
       // System.out.println(curr);
        for(int i=0;i<graph[curr].size();i++)     
        {
            Edge e=graph[curr].get(i);
            if(rec[e.dest])
               { return true;}
            else if(!vis[e.dest])
                { return dircycle(graph,vis,e.dest,rec);
                }
        }
        System.out.println(Arrays.toString(rec));
         rec[curr]=false;
         
        return false;
    }
 
    static class Edge {
        int src;
        int dest;

        public Edge(int src,int dest)
        {
            this.src=src;
            this.dest=dest;
               }
    }

}
