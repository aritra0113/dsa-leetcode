class Solution {
    public static ArrayList<Integer> topoSort(int v, int[][] edges) {
        // code here
        boolean vis[]=new boolean[v];
        ArrayList<Integer> graph[]=new ArrayList[v];
         ArrayList<Integer> ans=new ArrayList<Integer>();
        
        
      for(int i=0;i<v;i++)
        {
            graph[i]=new ArrayList<Integer>();
        }
        
        for(int[] edge:edges)
        {
            int u=edge[0];
            int x=edge[1];
            
            /*for(int i=1;i<edge.length;i++)
            {
                graph[u].add(edge[i]);
            }*/
             graph[u].add(x);
        }
        
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<v;i++)
        {
            if(!vis[i])
            dfs(i,vis,st,graph);
        }
        
        while(!st.isEmpty())
        {
            ans.add(st.pop());
        }
        //System.out.println(ans);
        return ans;
    }
    public static void dfs(int i,boolean vis[],Stack<Integer> st,ArrayList<Integer> graph[])
    {
        vis[i]=true;
        
        for(int j:graph[i])
        {
            if(!vis[j])
            dfs(j,vis,st,graph);
        }
        
        
        st.push(i);
        
        
        
    }
}
