class Solution {
    public void solve(char[][] board) {

        int mark[][]=new int[board.length][board[0].length];
       
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
                {if((i==0||j==0||i==board.length-1||j==board[0].length-1) && mark[i][j]!=1 && board[i][j]=='O')
                dfs(mark,board,i,j);}
            
        }
        //take care of the conditions of the boundary check
    
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {if(board[i][j]=='O' && mark[i][j]!=1)
                board[i][j]='X';
        }
        }
    

}
public void dfs(int [][] mark,char[][] board,int r,int c)
{
    if(mark[r][c]!=1)
    {    mark[r][c]=1;
    if(r>0 && board[r-1][c]=='O')
        dfs(mark,board,r-1,c);
    if(r<board.length-1 && board[r+1][c]=='O')
        dfs(mark,board,r+1,c);
     if(c>0 && board[r][c-1]=='O')
        dfs(mark,board,r,c-1);
     if(c<board[0].length-1  && board[r][c+1]=='O')
        dfs(mark,board,r,c+1);}
    return;
}
}
