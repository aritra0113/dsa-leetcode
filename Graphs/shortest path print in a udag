class Solution {
    public List<Integer> shortestPath(int n, int m, int[][] edges) {

        ArrayList<Pair> graph[]=new ArrayList[n];
        int parent[]=new int[n];
         for(int i=0;i<n;i++)
         {
            graph[i]=new ArrayList<Pair>();
            
         }
         for(int []edge:edges)
         {
            if(edge.length<3)
            continue;
            int u=edge[0]-1;
            int v=edge[1]-1;
            int w=edge[2];

            graph[u].add(new Pair(v,w));
            graph[v].add(new Pair(u,w));
         }

         int dist[]=new int[n];
         Arrays.fill(dist,Integer.MAX_VALUE);
         dist[0]=0;
            //getting the shortest distance from node 0 to everyother node;
            //Dikjstra
         PriorityQueue<Pair> q=new PriorityQueue<Pair>((a,b)->{
            if(a.dist!=b.dist) return Integer.compare(a.dist,b.dist);
            return Integer.compare(a.node,b.node);
         });

         q.add(new Pair(0,0));

         while(!q.isEmpty())
         {
            Pair p=q.poll();
            int u=p.node;

            for(Pair j:graph[u])
            {
                int v=j.node;
                int wt=j.dist;

                if(dist[u]+wt<dist[v])
                {
                    dist[v]=dist[u]+wt;
                    q.add(new Pair(v,dist[v]));
                    parent[v]=u;
                }
            }
         }
         
         List<Integer> ans=new ArrayList<>();
         if(dist[n-1]==Integer.MAX_VALUE)
         {
            ans.add(-1);
            return ans;
         }
         //doing bfs to get the shortest shortestPath
        
         

        
        ans.add(0,n);
        int  child=n-1;
        while(true)
        {
            if(child==0)
            break;
            int par=parent[child];
            ans.add(0,par+1);
             child=par;
        }
        ans.add(0,dist[n-1]);
        return ans;
     
    }
    
    public class Pair
    {
        int node;
        int dist;

        Pair(int node ,int dist)
        {
            this.node=node;
            this.dist=dist;
        }
    }
    
}



