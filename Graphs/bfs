import java.util.*;
import java.util.ArrayList;

public class bfs {


    public static void main(String[] args) {
       int vertex=7;
       ArrayList<edge> graph[]=new ArrayList[7]; //taking the array of the arraylist
       creategraph(graph);
        boolean vis[]=new boolean[vertex]; 
        /* for(int i=0;i<vertex;i++)
        {
            if(!vis[i])
            {
                breadthFS(graph,vis,i);
            }
        } */

        public static void creategraph(ArrayList<edge> graph[])
    {
        for(int i=0;i<graph.length;i++ ){
            graph[i]=new ArrayList<edge>();//previously it has null values in the array but now we assigning empty arrray list to each 
            //index of the array
           

        }
         graph[0].add(new edge(0,1));
         graph[0].add(new edge(0,2));

          graph[1].add(new edge(1,0));
          graph[1].add(new edge(1,3));

          graph[2].add(new edge(2,0));
           graph[2].add(new edge(2,4));
           

            
            graph[3].add(new edge(3,1));
            graph[3].add(new edge(3,4));
            graph[3].add(new edge(3,5));

             graph[4].add(new edge(4,2));
             graph[4].add(new edge(4,3));
             graph[4].add(new edge(4,5));

             graph[5].add(new edge(5,3));
             graph[5].add(new edge(5,4));
             graph[5].add(new edge(5,6));

             graph[6].add(new edge(6,5));

          }

          public static void breadthFS(ArrayList<edge> graph[],boolean vis[],int x )
    {
        Queue<Integer> q=new LinkedList<>();
       System.out.println();
        q.add(x);//we are taking the starting node
        while(!q.isEmpty()){
            int curr=q.remove();
            if(vis[curr]==false)
            {
                
                System.out.println(curr+" ");
                vis[curr]=true;
                for(int i=0;i<graph[curr].size();i++)
                {
                    edge e=graph[curr].get(i);
                    q.add(e.dest);
                }
            }
        }
    }
