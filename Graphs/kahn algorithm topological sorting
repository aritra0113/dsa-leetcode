class Solution {
    public static ArrayList<Integer> topoSort(int v, int[][] edges) {
        // code here
        //boolean vis[]=new boolean[v];
         //System.out.println("reached here");
        int indegree[]=new int[v];
        ArrayList<Integer> graph[]=new ArrayList[v];
         ArrayList<Integer> ans=new ArrayList<Integer>();
        
       
      for(int i=0;i<v;i++)
        {
            graph[i]=new ArrayList<Integer>();
            indegree[i]=0;
        }
        
        for(int[] edge:edges)
        {
            int u=edge[0];
            int x=edge[1];
            
            indegree[x]++;
            
            /*for(int i=1;i<edge.length;i++)
            {
                graph[u].add(edge[i]);
            }*/
             graph[u].add(x);
        }
        //System.out.println(Arrays.toString(indegree));
        //Stack<Integer> st=new Stack<>();
        Queue<Integer> q=new LinkedList<>();
        
        for(int i=0;i<v;i++)
        {
            if(indegree[i]==0)
            q.add(i);
        }
        
        while(!q.isEmpty())
        {
            int p=q.poll();
            ans.add(p);
            
            for(int j:graph[p])
            {
              indegree[j]--;
              
              if(indegree[j]==0)
              q.add(j);
            }
           
            
        }
        //System.out.println(ans);
        return ans;
    }
    
}
//first take the number of  incoming edges  in an array
//then one by one decrease the number of egde by using the stack
